// Efeito de part√≠culas
function createParticles() {
    const particlesContainer = document.getElementById("particles")
    const colors = ["#8d02e3", "#03005b", "#009dff", "#b900d6", "#ff3e7f"]
  
    for (let i = 0; i < 50; i++) {
      const particle = document.createElement("div")
      particle.classList.add("particle")
  
      // Tamanho aleat√≥rio
      const size = Math.random() * 15 + 5
      particle.style.width = `${size}px`
      particle.style.height = `${size}px`
  
      // Posi√ß√£o inicial aleat√≥ria
      const posX = Math.random() * 100
      const posY = Math.random() * 100
      particle.style.left = `${posX}%`
      particle.style.top = `${posY}%`
  
      // Cor aleat√≥ria
      const color = colors[Math.floor(Math.random() * colors.length)]
      particle.style.backgroundColor = color
      particle.style.boxShadow = `0 0 ${size / 2}px ${color}`
  
      // Anima√ß√£o
      const duration = Math.random() * 20 + 10
      const delay = Math.random() * 5
  
      particle.style.animation = `float ${duration}s ease-in-out ${delay}s infinite alternate`
  
      particlesContainer.appendChild(particle)
    }
  }
  
  // Efeito de cora√ß√µes flutuantes
  function createFloatingHearts() {
    const heartsContainer = document.getElementById("floating-hearts")
    const heartSymbols = ["‚ù§Ô∏è", "üíñ", "üíï", "üíì", "üíó", "üíò", "üíù"]
  
    setInterval(() => {
      const heart = document.createElement("div")
      heart.classList.add("heart")
  
      // S√≠mbolo aleat√≥rio
      heart.innerText = heartSymbols[Math.floor(Math.random() * heartSymbols.length)]
  
      // Posi√ß√£o inicial aleat√≥ria
      const posX = Math.random() * 100
      heart.style.left = `${posX}%`
      heart.style.bottom = "-20px"
  
      // Tamanho aleat√≥rio
      const size = Math.random() * 1 + 0.5
      heart.style.fontSize = `${size}rem`
  
      // Anima√ß√£o
      const duration = Math.random() * 10 + 5
      heart.style.animationDuration = `${duration}s`
  
      heartsContainer.appendChild(heart)
  
      // Remover ap√≥s a anima√ß√£o
      setTimeout(() => {
        heart.remove()
      }, duration * 1000)
    }, 300)
  }
  
  // Sistema de mensagens rotativas
  function initRotatingMessages() {
    const messagesContainer = document.getElementById("messages-container")
    if (!messagesContainer) {
      console.error("Container de mensagens n√£o encontrado")
      return
    }
  
    const messages = [
      "Meu cora√ß√£o √© seu para sempre...",
      "Voc√™ √© o amor da minha vida...",
      "Cada momento com voc√™ √© especial...",
      "Te amarei para todo o sempre...",
      "Voc√™ me faz feliz todos os dias...",
      "Meu amor por voc√™ √© infinito...",
      "Voc√™ √© meu sonho realizado...",
      "Juntos somos mais fortes...",
      "Nosso amor √© eterno...",
      "Voc√™ √© minha alma g√™mea...",
    ]
  
    // Criar elementos para cada mensagem
    messages.forEach((text, index) => {
      const messageElement = document.createElement("div")
      messageElement.classList.add("message")
      messageElement.textContent = text
      messageElement.id = `message-${index}`
      messagesContainer.appendChild(messageElement)
    })
  
    let currentMessageIndex = 0
    const messageElements = document.querySelectorAll(".message")
  
    // Fun√ß√£o para mostrar a pr√≥xima mensagem
    function showNextMessage() {
      // Esconder mensagem atual
      messageElements.forEach((el) => el.classList.remove("active"))
  
      // Mostrar pr√≥xima mensagem
      messageElements[currentMessageIndex].classList.add("active")
  
      // Atualizar √≠ndice para a pr√≥xima mensagem
      currentMessageIndex = (currentMessageIndex + 1) % messageElements.length
    }
  
    // Mostrar a primeira mensagem
    showNextMessage()
  
    // Alternar mensagens a cada 4 segundos
    setInterval(showNextMessage, 4000)
  }
  
  // Efeito de clique no bot√£o
  function buttonClickEffect() {
    const button = document.getElementById("main-button")
    if (!button) return
  
    button.addEventListener("click", (e) => {
      // Criar efeito de ondula√ß√£o
      const ripple = document.createElement("span")
      ripple.classList.add("ripple")
      button.appendChild(ripple)
  
      // Adicionar efeito de vibra√ß√£o
      navigator.vibrate && navigator.vibrate(50)
  
      // Remover o efeito ap√≥s a anima√ß√£o
      setTimeout(() => {
        ripple.remove()
      }, 600)
    })
  }
  
  // Inicializar todos os efeitos quando o DOM estiver carregado
  document.addEventListener("DOMContentLoaded", () => {
    createParticles()
    createFloatingHearts()
    initRotatingMessages()
    buttonClickEffect()
  })
  